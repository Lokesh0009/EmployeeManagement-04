package com.gl.springboot.cruddemo.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Bean
	public UserDetailsService userDetaitlsService() {
		return new UserDetailsServiceImpl();
	}
	
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception{
		return super.authenticationManagerBean();
		
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		http.authorizeRequests().antMatchers("/api/user", "/api/role").hasAuthority("Admin")
								.antMatchers(HttpMethod.POST , "/api/employees").hasAuthority("Admin")
								.antMatchers(HttpMethod.PUT , "/api/employees").hasAuthority("Admin")
								.antMatchers(HttpMethod.DELETE , "/api/employees").hasAuthority("Admin")
								.anyRequest().authenticated().and().httpBasic()
				/*
				 * .formLogin().loginProcessingUrl("/login").sucessForwardUrl("/student/list").
				 * permitAll() .and() .logout().logoutSucessUrl("/login").permitAll() .and()
				 * .exceptionalHandling().accessDeniedPage("/student/403")
				 */
								.and().cors().and().csrf().disable();

		
	}
}