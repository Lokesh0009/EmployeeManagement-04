package com.gl.springboot.cruddemo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.gl.springboot.cruddemo.dao.EmployeeRepository;
import com.gl.springboot.cruddemo.dao.RoleRepository;
import com.gl.springboot.cruddemo.dao.UserRepository;
import com.gl.springboot.cruddemo.entity.Employee;
import com.gl.springboot.cruddemo.entity.Role;
import com.gl.springboot.cruddemo.entity.User;

@Service
public class EmployeeServiceImpl implements EmployeeService {

	private EmployeeRepository employeeRepository;
	
	@Autowired
	RoleRepository roleRepository;
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	BCryptPasswordEncoder bcryptEncoder;
	
	
	@Autowired
	public EmployeeServiceImpl(EmployeeRepository theEmployeeRepository) {
		employeeRepository = theEmployeeRepository;
	}
	
	@Override
	public List<Employee> findAll() {
		return employeeRepository.findAll();
	}

	@Override
	public Employee findById(int theId) {
		Optional<Employee> result = employeeRepository.findById(theId);
		
		Employee theEmployee = null;
		
		if (result.isPresent()) {
			theEmployee = result.get();
		}
		else {
			
			throw new IllegalArgumentException("Did not find employee id - " + theId);
		}
		
		return theEmployee;
	}

	@Override
	public void save(Employee theEmployee) {
		employeeRepository.save(theEmployee);
	}

	@Override
	public void deleteById(int theId) {
		employeeRepository.deleteById(theId);
	}

	

	/*
	 * @Override public List<Employee> searchbyFirstName(String firstName) {
	 * 
	 * return employeeRepository.findByFirstNameContinsAllIgnoreCase(firstName); }
	 */

	@Override
	public List<Employee> sortByFirstNameAsc() {
		
		return employeeRepository.findAllByOrderByFirstNameAsc();
	}

	@Override
	public User saveUser(User user) {
		
		user.setPassword(bcryptEncoder.encode(user.getPassword()));
		return userRepository.save(user);
	}

	@Override
	public Role saveRole(Role role) {
		
		return roleRepository.save(role);
	}

}






